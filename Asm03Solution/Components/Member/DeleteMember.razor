@page "/member/delete/{id:int}"
@rendermode InteractiveServer
@using DataAccess.Models
@using BusinessObject.Services.Instance
@using Microsoft.AspNetCore.Components
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Delete Member</PageTitle>

<div class="container mt-4">
    <h1>Delete Member</h1>

    @if (loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (member == null)
    {
        <div class="alert alert-danger">
            Member not found.
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <h4>Are you sure you want to delete this member?</h4>
                <div class="mt-3">
                    <dl class="row">
                        <dt class="col-sm-3">Email</dt>
                        <dd class="col-sm-9">@member.Email</dd>

                        <dt class="col-sm-3">Company Name</dt>
                        <dd class="col-sm-9">@member.CompanyName</dd>

                        <dt class="col-sm-3">City</dt>
                        <dd class="col-sm-9">@member.City</dd>

                        <dt class="col-sm-3">Country</dt>
                        <dd class="col-sm-9">@member.Country</dd>
                    </dl>
                </div>

                <div class="d-flex justify-content-end">
                    <button class="btn btn-danger me-2" @onclick="ConfirmDelete">Yes, Delete</button>
                    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>

                @if (errorMessages.Any())
                {
                    <div class="alert alert-danger mt-3">
                        <ul>
                            @foreach (var error in errorMessages)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Member member;
    private bool loading = true;
    private List<string> errorMessages = new List<string>();
    private bool isAuthenticated = false;
    private bool processingDelete = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        await LoadMember();
        loading = false;
    }

    private async Task LoadMember()
    {
        try
        {
            member = await MemberService.GetMemberByIdAsync(Id);
            if (member == null)
            {
                errorMessages.Add($"Member with ID {Id} not found.");
            }
        }
        catch (Exception ex)
        {
            errorMessages.Add($"Error loading member: {ex.Message}");
        }
    }

    private async Task CheckAuthentication()
    {
        try
        {
            var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentUser");
            isAuthenticated = !string.IsNullOrEmpty(userJson);
            
            // Check if this is the currently logged in user
            if (isAuthenticated)
            {
                try
                {
                    var currentUser = System.Text.Json.JsonSerializer.Deserialize<Member>(userJson);
                    if (currentUser != null && currentUser.MemberId == Id)
                    {
                        errorMessages.Add("You cannot delete your own account while logged in.");
                    }
                }
                catch 
                {
                    // Ignore deserialization errors
                }
            }
        }
        catch (Exception ex)
        {
            isAuthenticated = false;
            errorMessages.Add($"Error checking authentication: {ex.Message}");
        }
    }

    private async Task ConfirmDelete()
    {
        if (processingDelete) return;
        
        processingDelete = true;
        
        try
        {
            // Check if member has associated orders
            var hasOrders = await MemberService.MemberHasOrdersAsync(Id);
            if (hasOrders)
            {
                errorMessages.Add("Cannot delete this member because they have associated orders.");
                processingDelete = false;
                return;
            }
            
            await MemberService.DeleteMemberAsync(Id);
            NavigationManager.NavigateTo("/member");
        }
        catch (Exception ex)
        {
            errorMessages.Add($"Error deleting member: {ex.Message}");
            processingDelete = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/member");
    }
} 