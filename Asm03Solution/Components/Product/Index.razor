@page "/product"
@rendermode InteractiveServer
@using DataAccess.Models
@using DataAccess.Repositories
@using Microsoft.AspNetCore.Components
@inject IUnitOfWork UnitOfWork
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Products</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Products</h1>
        <button class="btn btn-primary" @onclick="CreateNewProduct">Create New</button>
    </div>

    @if (loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (products == null || !products.Any())
    {
        <div class="alert alert-info">
            No products found.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Product Name</th>
                        <th>Weight</th>
                        <th>Unit Price</th>
                        <th>Units In Stock</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in products)
                    {
                        <tr>
                            <td>@product.ProductName</td>
                            <td>@product.Weight</td>
                            <td>@product.UnitPrice.ToString("C")</td>
                            <td>@product.UnitsInStock</td>
                            <td>@(product.Category?.CategoryName ?? "N/A")</td>
                            <td>
                                <button class="btn btn-primary btn-sm me-1" @onclick="() => EditProduct(product.ProductId)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.ProductId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>

@code {
    private IEnumerable<Product> products;
    private bool loading = true;
    private bool isAuthenticated = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
        // if (!isAuthenticated)
        // {
        //     NavigationManager.NavigateTo("/login");
        //     return;
        // }

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        loading = true;
        try
        {
            if (UnitOfWork == null)
            {
                errorMessage = "Database service unavailable.";
                loading = false;
                return;
            }

            products = await UnitOfWork.Products.GetAllAsync();
            var categoriesDict = (await UnitOfWork.Categories.GetAllAsync())?.ToDictionary(c => c.CategoryId) ?? new Dictionary<int, Category>();

            foreach (var product in products)
            {
                if (categoriesDict.ContainsKey(product.CategoryId))
                {
                    product.Category = categoriesDict[product.CategoryId];
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading products: {ex.Message}";
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task CheckAuthentication()
    {
        try
        {
            var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", new object[] { "currentUser" });
            isAuthenticated = !string.IsNullOrEmpty(userJson);
        }
        catch (Exception ex)
        {
            isAuthenticated = false;
            errorMessage = $"Error checking authentication: {ex.Message}";
        }
    }

    private void CreateNewProduct()
    {
        NavigationManager.NavigateTo("/product/add");
    }

    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/product/edit/{id}");
    }

    private void DeleteProduct(int id)
    {
        NavigationManager.NavigateTo($"/product/delete/{id}");
    }
}