@page "/profile"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Components
@using BusinessObject.Services
@using DataAccess.Models
 
@inject NavigationManager NavigationManager;
@inject MemberService userAccountService;

<div class="container mt-4">
    <h3>User Profile</h3>
    <hr />
    @if (user == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <EditForm Model="@user" OnValidSubmit="HandleValidSubmit" FormName="UpdateForm">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Email:</label>
                <input class="form-control" value="@user.Email" readonly />

            </div>

            <div class="mb-3">
                <label>Company Name:</label>
                <InputText class="form-control" @bind-Value="@user.CompanyName"/>
                <ValidationMessage For="@(() => user.CompanyName)" />
            </div>

            <div class="mb-3">
                <label>City:</label>
                <InputText class="form-control" @bind-Value="@user.City" />
                <ValidationMessage For="@(() => user.City)" />
            </div>

            <div class="mb-3">
                <label>Country:</label>
                <InputText class="form-control" @bind-Value="@user.Country" />
                <ValidationMessage For="@(() => user.Country)" />
            </div>

            <button type="submit" class="btn btn-primary">Save Changes</button>
        </EditForm>

        <button class="btn btn-secondary mt-2" @onclick="GoToOrderHistory">View Order History</button>
    }
</div>

@code {
    private Member? user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get the email from session
        var email = HttpContextAccessor.HttpContext?.Session.GetString("Email");

        if (string.IsNullOrEmpty(email))
        {
            NavigationManager.NavigateTo("/Login");
            return;
        }

        user = await userAccountService.GetMemberByEmail(email);
    }

    protected async Task HandleValidSubmit()
    {
        if (user == null)
        {
            Console.WriteLine("User object is NULL!");
            return;
        }

        try
        {
            Console.WriteLine($"Before update: {user.CompanyName}, {user.City}, {user.Country}");
            var existingUser = await userAccountService.GetMemberByEmail(user.Email);

            // Update the fields
            existingUser.CompanyName = user.CompanyName;
            existingUser.City = user.City;
            existingUser.Country = user.Country;

            var success = await userAccountService.UpdateMemberProfile(existingUser);

            if (success)
            {
                Console.WriteLine("Profile updated successfully");

                user = await userAccountService.GetMemberByEmail(user.Email);
                Console.WriteLine($"After update: {user.CompanyName}, {user.City}, {user.Country}");
                StateHasChanged(); 
            }
            else
            {
                Console.WriteLine("Profile update failed");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Profile update failed: {ex.Message}");
        }
    }

    private void GoToOrderHistory()
    {
        NavigationManager.NavigateTo("/user/orders");
    }
}
