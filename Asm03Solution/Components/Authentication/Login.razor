@page "/login"
@using BusinessObject.RequestModel
@using BusinessObject.Services.Instance
@using DataAccess.Models
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Đăng nhập - Hệ thống quản lý</PageTitle>

<div class="container min-vh-100 d-flex align-items-center justify-content-center py-5">
    <div class="row justify-content-center w-100">
        <div class="col-md-5">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-primary text-white text-center py-4 border-0">
                    <h3 class="mb-0">
                        <i class="fas fa-user-circle fa-2x mb-3"></i>
                        <div>Đăng nhập</div>
                    </h3>
                </div>
                <div class="card-body p-4">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="login-form">
                        <DataAnnotationsValidator />

                        <div class="form-floating mb-3">
                            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="name@example.com" />
                            <label for="email">
                                <i class="fas fa-envelope me-2"></i>Email
                            </label>
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small" />
                        </div>

                        <div class="form-floating mb-4">
                            <InputText id="password" @bind-Value="loginModel.Password" class="form-control" type="password" placeholder="Mật khẩu" />
                            <label for="password">
                                <i class="fas fa-lock me-2"></i>Mật khẩu
                            </label>
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger d-flex align-items-center mt-3" role="alert">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                <div>@errorMessage</div>
                            </div>
                        }

                        <div class="d-grid gap-2 mt-4">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Đang đăng nhập...</span>
                                }
                                else
                                {
                                    <i class="fas fa-sign-in-alt me-2"></i>
                                    <span>Đăng nhập</span>
                                }
                            </button>
                        </div>

                        <div class="text-center mt-4">
                            <a href="/register" class="text-decoration-none">
                                <i class="fas fa-user-plus me-2"></i>Chưa có tài khoản? Đăng ký
                            </a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginRequestModel loginModel { get; set; } = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool isProcessing = false; 

    private async Task HandleLogin()
    {
        // Ngăn xử lý nhiều lần khi nhấn nút nhiều lần
        if (isProcessing) return;
        
        errorMessage = string.Empty;
        isLoading = true;
        isProcessing = true;

        try
        {
      

            // Gọi API xác thực với LoginRequestModel
            var member = await MemberService.AuthenticateAsync(loginModel);

            if (member != null)
            {
                try
                {
                    // Lưu thông tin người dùng vào localStorage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "currentUser", 
                        System.Text.Json.JsonSerializer.Serialize(new { 
                            Id = member.MemberId,
                            Email = member.Email,
                            CompanyName = member.CompanyName
                        }));

                    // Chuyển hướng đến trang Product
                    NavigationManager.NavigateTo("/");
                }
                catch (Exception jsEx)
                {
                    errorMessage = "Lỗi lưu thông tin đăng nhập: " + jsEx.Message;
                }
            }
            else
            {
                errorMessage = "Email hoặc mật khẩu không đúng";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Đăng nhập thất bại: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            isProcessing = false;
        }
    }
} 