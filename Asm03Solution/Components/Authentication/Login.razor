@page "/login"
@using BusinessObject.RequestModel
@using BusinessObject.Services.Instance
@using DataAccess.Models
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (_isProcessing)
{
    <div class="overlay position-fixed" style="top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0,0,0,0.5); z-index: 1000;"></div>
    <div class="loading-wrapper position-fixed d-flex justify-content-center align-items-center" style="top: 0; left: 0; right: 0; bottom: 0; z-index: 1001;">
        <div class="loading-text fs-1 text-white">Đang đăng nhập...</div>
    </div>
}

<EditForm Model="_model" OnValidSubmit="LoginAsync" FormName="login-form">
    <DataAnnotationsValidator />
    <div class="container mt-5 d-flex justify-content-center">
        <div class="card" style="width: 450px">
            <div class="card-header bg-primary text-white">
                <h2>Đăng nhập</h2>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText @bind-Value="_model.Email" class="form-control" placeholder="Nhập email" />
                    <ValidationMessage For="()=> _model.Email" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Mật khẩu</label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" placeholder="Nhập mật khẩu" />
                    <ValidationMessage For="()=> _model.Password" />
                </div>

                @if (!string.IsNullOrWhiteSpace(_error))
                {
                    <div class="alert alert-danger">@_error</div>
                }
            </div>
            <div class="card-footer d-grid">
                <button type="submit" class="btn btn-primary">Đăng nhập</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private LoginRequestModel _model = new();
    private bool _isProcessing = false;
    private string? _error = null;

    private async Task LoginAsync()
    {
        _error = null;
        _isProcessing = true;
        try
        {
            Console.WriteLine($"Đang xác thực với email: {_model.Email}");
            
            // Kiểm tra dữ liệu đầu vào
            if (string.IsNullOrWhiteSpace(_model.Email) || string.IsNullOrWhiteSpace(_model.Password))
            {
                _error = "Vui lòng nhập đầy đủ email và mật khẩu";
                _isProcessing = false;
                return;
            }

            // Gọi API xác thực
            var member = await MemberService.AuthenticateAsync(_model);
            Console.WriteLine($"Kết quả xác thực: {(member != null ? "Thành công" : "Thất bại")}");

            if (member == null)
            {
                _error = "Email hoặc mật khẩu không đúng";
                _isProcessing = false;
                return;
            }

            // Đăng nhập thành công
            try
            {
                Console.WriteLine("Lưu thông tin người dùng vào localStorage");
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "currentUser", 
                    System.Text.Json.JsonSerializer.Serialize(new { 
                        Id = member.MemberId,
                        Email = member.Email,
                        CompanyName = member.CompanyName
                    }));

                Console.WriteLine("Chuyển hướng đến trang sản phẩm");
                NavigationManager.NavigateTo("/product", forceLoad: true);
            }
            catch (Exception jsEx)
            {
                Console.WriteLine($"Lỗi JS: {jsEx.Message}");
                _error = "Lỗi lưu thông tin đăng nhập: " + jsEx.Message;
                _isProcessing = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            _error = $"Lỗi: {ex.Message}";
            _isProcessing = false;
        }
    }
}
