@page "/register"
@using DataAccess.Models
@using BusinessObject.Services.Instance
@using Microsoft.AspNetCore.Components
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Register</PageTitle>

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Register Account</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@member" OnValidSubmit="HandleRegistration" FormName="register-form">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" @bind-Value="member.Email" class="form-control" />
                            <ValidationMessage For="@(() => member.Email)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="companyName">Company Name</label>
                            <InputText id="companyName" @bind-Value="member.CompanyName" class="form-control" />
                            <ValidationMessage For="@(() => member.CompanyName)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="city">City</label>
                            <InputText id="city" @bind-Value="member.City" class="form-control" />
                            <ValidationMessage For="@(() => member.City)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="country">Country</label>
                            <InputText id="country" @bind-Value="member.Country" class="form-control" />
                            <ValidationMessage For="@(() => member.Country)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText id="password" @bind-Value="member.Password" class="form-control" type="password" />
                            <ValidationMessage For="@(() => member.Password)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="confirmPassword">Confirm Password</label>
                            <InputText id="confirmPassword" @bind-Value="confirmPassword" class="form-control" type="password" />
                            @if (showPasswordError)
                            {
                                <div class="text-danger">Passwords do not match</div>
                            }
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">
                                @errorMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success mt-3">
                                @successMessage
                            </div>
                        }

                        <div class="d-grid gap-2 mt-4">
                            <button type="submit" class="btn btn-primary">Register</button>
                        </div>

                        <div class="text-center mt-3">
                            <a href="/login">Already have an account? Login</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Member member = new Member();
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool showPasswordError = false;

    protected override void OnInitialized()
    {
        // Khởi tạo member với các trường rỗng
        member = new Member
        {
            Email = string.Empty,
            CompanyName = string.Empty,
            City = string.Empty,
            Country = string.Empty,
            Password = string.Empty
        };
        confirmPassword = string.Empty;
    }

    private async Task HandleRegistration()
    {
        // Kiểm tra password có khớp không
        if (member.Password != confirmPassword)
        {
            showPasswordError = true;
            return;
        }
        
        showPasswordError = false;

        try
        {
            // Thử tạo thành viên mới
            var newMember = await MemberService.CreateMemberAsync(member);
            
            // Hiển thị thông báo thành công
            successMessage = "Registration successful! Redirecting to login...";
            errorMessage = string.Empty;
            
            // Đợi 2 giây rồi chuyển hướng đến trang đăng nhập
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (InvalidOperationException ex)
        {
            // Xử lý lỗi như email đã tồn tại
            errorMessage = ex.Message;
            successMessage = string.Empty;
        }
        catch (Exception ex)
        {
            // Xử lý các lỗi khác
            errorMessage = $"Registration failed: {ex.Message}";
            successMessage = string.Empty;
        }
    }
} 