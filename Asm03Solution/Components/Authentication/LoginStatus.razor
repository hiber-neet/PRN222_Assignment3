@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (isAuthenticated)
{
    <span class="me-3">Welcome, @userName!</span>
    <a href="/logout" class="btn btn-outline-danger btn-sm">Logout</a>
}
else
{
    <a href="/login" class="btn btn-outline-primary btn-sm me-2">Login</a>
    <a href="/register" class="btn btn-outline-success btn-sm">Register</a>
}

@code {
    private bool isAuthenticated = false;
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CheckLoginStatus();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set up event listener for storage changes
            await JSRuntime.InvokeVoidAsync("window.addEventListener", "storage", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnStorageChange()
    {
        await CheckLoginStatus();
        StateHasChanged();
    }

    private async Task CheckLoginStatus()
    {
        try
        {
            var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentUser");
            
            if (!string.IsNullOrEmpty(userJson))
            {
                isAuthenticated = true;
                // Parse JSON to get user info
                var userInfo = System.Text.Json.JsonSerializer.Deserialize<UserInfo>(userJson);
                userName = userInfo?.Email ?? "User";
            }
            else
            {
                isAuthenticated = false;
                userName = string.Empty;
            }
        }
        catch
        {
            isAuthenticated = false;
            userName = string.Empty;
        }
    }

    private class UserInfo
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string CompanyName { get; set; }
    }
} 